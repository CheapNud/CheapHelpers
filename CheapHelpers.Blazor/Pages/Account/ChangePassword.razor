@using MoreLinq
@attribute [Authorize]

<MudForm @ref="form" Model="@model" Validation="@(validator.ValidateValue)">
    <MudText Typo="Typo.subtitle2">@Loc["PasswordRules"]</MudText>
    <PasswordTextField Class="mt-3" Label="Oud Paswoord" @bind-Value=model.OldPassword For="(() => model.OldPassword)"></PasswordTextField>
    <PasswordTextField Class="mt-3" Label="Nieuw paswoord" @bind-Value=model.NewPassword For="(() => model.NewPassword)"></PasswordTextField>
    <PasswordTextField Class="mt-3" Label="Bevestig paswoord" @bind-Value=model.ConfirmPassword For="(() => model.ConfirmPassword)"></PasswordTextField>
</MudForm>
<MudButton Class="mt-3" Variant="Variant.Filled" Color="Color.Primary" OnClick="Save">@Loc["ChangePassword"]</MudButton>

@code {
    public class ChangePasswordViewModel
    {
        public string NewPassword { get; set; }
        public string OldPassword { get; set; }
        public string ConfirmPassword { get; set; }
    }

    [Inject]
    private UserManager<ApplicationUser> UserManager { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    public ChangePasswordViewModel model = new();
    public MudForm form;
    public ChangePasswordValidator validator;

    protected override async Task OnInitializedAsync()
    {
        validator = new ChangePasswordValidator(Factory);

    }

    private async Task Save()
    {
        try
        {
            if (model.NewPassword == null || model.ConfirmPassword == null || model.OldPassword == null)
            {
                ToastService.Add("Vereist veld niet ingevuld");
                return;
            }

            if (model.OldPassword.Equals(model.NewPassword))
            {
                ToastService.Add("Nieuw wachtwoord mag niet hetzelfde zijn als het oude");
                return;
            }

            if (!model.NewPassword.Equals(model.ConfirmPassword))
            {
                ToastService.Add("Nieuw wachtwoord komt niet overeen met confirmatie");
                return;
            }

            var user = await UserService.GetUserAsync(AuthenticationStateTask);
            var tuser = await UserManager.FindByIdAsync(user.Id);
            var changePasswordResult = await UserManager.ChangePasswordAsync(tuser, model.OldPassword, model.NewPassword); //<-- post to controller instead, this could cause issues

            if (changePasswordResult.Succeeded)
            {
                ToastService.Add("Opgeslagen", Severity.Success);
            }
            else
            {
                ToastService.Add(Loc["Error"], Severity.Error);
                Debug.WriteLine(changePasswordResult.Errors.Select(x => x.Description).ToDelimitedString(","));
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.Message);
            ToastService.Add(Loc["ErrorMessage"]);
        }
    }
}
