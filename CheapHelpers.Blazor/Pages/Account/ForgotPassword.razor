@page "/Account/ForgotPassword"
@using CheapHelpers.Services.Email
@using Microsoft.AspNetCore.WebUtilities;
@using System.Text;
@using System.Text.Encodings.Web;

<MudGrid Class="justify-center d-flex mt-6">
    <MudPaper Elevation=2 Class="pa-6" Style="max-width: 420px;">
        <MudGrid>
            <MudItem xxl="12" xl="12" md="12" xs="12">
                <MudText Typo="Typo.h4">Forgot Password</MudText>
            </MudItem>
            <MudItem xxl="12" xl="12" md="12" xs="12">
                <MudDivider />
            </MudItem>
            <MudItem xxl="12" xl="12" md="12" xs="12">
                <MudTextField @bind-Value=Email Clearable=true Placeholder="example@domain.com" Label="Email" InputMode=InputMode.email InputType=InputType.Email Variant="Variant.Outlined"></MudTextField>
            </MudItem>
            <MudItem xxl="12" xl="12" md="12" xs="12">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth=true OnClick="Send">Versturen</MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudGrid>

@code {
    public string Email { get; set; }

    [Inject] protected UserManager<CheapUser> UserManager { get; set; }
    [Inject] protected ISnackbar ToastService { get; set; } = default!;
    [Inject] protected IStringLocalizer Loc { get; set; } = default!;
    [Inject] protected IEmailService Mailer { get; set; }
    [Inject] protected NavigationManager Nav { get; set; } = default!;

    private async Task Send()
    {
        try
        {
            var user = await UserManager.FindByEmailAsync(Email);
            if (user == null || !(await UserManager.IsEmailConfirmedAsync(user)))
            {
                // Don't reveal that the user does not exist or is not confirmed
                //return RedirectToPage("./ForgotPasswordConfirmation");
                return;
            }
            
            // For more information on how to enable account confirmation and password reset please
            // visit https://go.microsoft.com/fwlink/?LinkID=532713
            //var callbackUrl = Url.Page("/Account/ResetPassword", pageHandler: null, values: new { area = "Identity", code }, protocol: Request.Scheme);
            //await Mailer.SendEmailAsync(Email, "Reset Password", $"Please reset your password by <a href='{HtmlEncoder.Alternative.Encode(callbackUrl)}'>clicking here</a>.");
            //return RedirectToPage("./ForgotPasswordConfirmation");

            var code = await UserManager.GeneratePasswordResetTokenAsync(user);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
            var link = $@"{Nav.BaseUri}Account/ResetPassword?userid={user.Id}&code={code}";
            await Mailer.SendPasswordTokenAsync(Email, link);
            ToastService.Add(Loc["SendMail"], Severity.Success);
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.Message);
            ToastService.Add(Loc["ErrorMessage"]);
        }
    }
}
