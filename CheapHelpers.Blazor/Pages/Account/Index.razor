@page "/Account"
@page "/Account/{TabIndex:int}"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities;
@using System.Text;
@attribute [Authorize]

<MudText Typo="Typo.h5">Beheer je account</MudText>

@if (CurrentUser != null)
{
    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" Class="mt-3" PanelClass="pa-6" @bind-ActivePanelIndex=TabIndex>
        <MudTabPanel Text="@Loc["General"]">
            <MudPaper Class="pa-3">
                <MudTooltip Text="@Loc["DarkTheme"]">
                    <MudSwitch Class="mt-1" Color=Color.Success UncheckedColor=Color.Info Label="@Loc["DarkTheme"]" T=bool? ValueChanged="DarkModeChanged" Value=CurrentUser.IsDarkMode></MudSwitch>
                </MudTooltip>

                @if (CurrentUser.EmailConfirmed)
                {
                    <MudStack Row Class="mt-3 mb-1">
                        <MudTextField Label="Mail" Variant="Variant.Outlined" @bind-Value=CurrentUser.Email Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Check"></MudTextField>
                        <MudTextField Label="New Mail" Variant="Variant.Outlined" @bind-Value=NewEmail></MudTextField>
                        <ProgressButton Variant="Variant.Filled" Color=Color.Primary OnClick="ChangeMail" ButtonText="@Loc["ChangeMail"]"></ProgressButton>
                    </MudStack>
                }
                else
                {
                    <ProgressButton Class="mt-3" Variant="Variant.Filled" Color=Color.Primary OnClick="SendConfirmationMail" ButtonText="@Loc["VerifyMail"]"></ProgressButton>
                }

                <MudGrid>
                    <MudItem xs="12" md="6">
                        <MudTextField Label=@Loc["FirstName"] Variant="Variant.Outlined" @bind-Value=CurrentUser.FirstName></MudTextField>
                        <MudTextField Class="mt-4" Label=@Loc["LastName"] Variant="Variant.Outlined" @bind-Value=CurrentUser.LastName></MudTextField>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudTextField Label=@Loc["Tel"] Variant="Variant.Outlined" @bind-Value=CurrentUser.PhoneNumber></MudTextField>
                        <MudSelect Class="mt-3" T="string" @bind-Value=CurrentUser.TimeZoneInfoId Label="TimeZone" Variant="Variant.Outlined">
                            @foreach (var item in TimeZoneInfo.GetSystemTimeZones())
                            {
                                <MudSelectItem Value="item.Id">@item.DisplayName</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                </MudGrid>

                <AuthorizeView Roles=@(@$"{Roles.ServiceMechanic},{Roles.Admin}")>
                    <MudNumericField Class="mt-3" Label="aantal KM" Variant="Variant.Outlined" @bind-Value=CurrentUser.TotalMileage></MudNumericField>
                </AuthorizeView>
            </MudPaper>

            <AuthorizeView Policy=@Policies.AccountancyUser>
                <MudPaper Class="pa-3 mt-3">
                    <MudText Typo="Typo.h6" Class="pa-1">Ontvang facturatie</MudText>
                    <MudTooltip Text="Schakelt het ontvangen van mails binnen de facturatie in of uit, standaard = uit.">
                        <MudCheckBox Label="Mails ontvangen (1x week)" @bind-Value=CurrentUser.ReceiveMailAccountancy></MudCheckBox>
                    </MudTooltip>
                </MudPaper>
            </AuthorizeView>

            <AuthorizeView Policy=@Policies.ServiceUser>
                <MudPaper Class="pa-3 mt-3">
                    <MudText Typo="Typo.h6" Class="pa-1">Mailing interne service</MudText>
                    <MudTooltip Text="Ontvang service mails als de status gewijzigd is.">
                        <MudCheckBox Label="ontvang service status" @bind-Value=CurrentUser.ReceiveMailServiceStatus></MudCheckBox>
                    </MudTooltip>
                    <MudTooltip Text="Ontvang service mails als er iets verkeerd bevoorraad is.">
                        <MudCheckBox Label="ontvang verkeerde bevoorrading" @bind-Value=CurrentUser.ReceiveMailWrongSupply></MudCheckBox>
                    </MudTooltip>
                </MudPaper>
            </AuthorizeView>

            <AuthorizeView Policy=@Policies.ServiceUser>
                <MudPaper Class="pa-3 mt-3">
                    <MudText Typo="Typo.h6" Class="pa-1">Mailing externe service</MudText>
                    <MudTooltip Text="Schakelt het verzenden van mails binnen de externe service in of uit, standaard = aan.">
                        <MudCheckBox Label="Versturen mails" @bind-Value=CurrentUser.SendMailServiceRequest></MudCheckBox>
                    </MudTooltip>
                </MudPaper>
            </AuthorizeView>

            <MudButton Class="mt-3" Variant="Variant.Filled" Color=Color.Primary FullWidth=true OnClick="Save">@Loc["Save"]</MudButton>
        </MudTabPanel>
        <MudTabPanel Text="@Loc["Notifications"]">
            <Notifications></Notifications>
        </MudTabPanel>
        <MudTabPanel Text="@Loc["Password"]">
            @if (CurrentUser.EmailConfirmed)
            {
                <ChangePassword></ChangePassword>
            }
            else
            {
                <MudButton Class="mt-3" Variant="Variant.Filled" Color=Color.Primary OnClick="SendConfirmationMail">@Loc["VerifyMail"]</MudButton>
            }
        </MudTabPanel>
        <MudTabPanel Text="@Loc["Secrets"]">
            @if (pinValidated)
            {
                //mudnumericfield has a bug where it doesn't show its initial value
                <MudTextField Class="mt-3" Label="Prijs X" T=decimal Variant="Variant.Outlined" @bind-Value=CurrentUser.PriceMultiplier Immediate AutoFocus InputMode="@(InputMode.@decimal)" Placeholder="2.7" HelperText="In de configurator wordt deze factor gebruikt."></MudTextField>
                <MudButton Class="mt-3" Variant="Variant.Filled" Color=Color.Primary FullWidth=true OnClick="Save">@Loc["Save"]</MudButton>
            }
            else if (string.IsNullOrWhiteSpace(CurrentUser.PinCodeHash))
            {
                <SetupPin></SetupPin>
            }
            else
            {
                <MudButton Class="mt-2" Color="Color.Primary" Variant="Variant.Filled" OnClick="PromptForPin">Unlock with PIN</MudButton>
            }
        </MudTabPanel>
        <AuthorizeView Policy=@Policies.Admin>
            <MudTabPanel Text="Authenticator">
            </MudTabPanel>
        </AuthorizeView>
        <AuthorizeView Policy=@Policies.Customer>
            <MudTabPanel Text="Klanten">
                <CustomerAccounts></CustomerAccounts>
            </MudTabPanel>
        </AuthorizeView>
    </MudTabs>
}

@code {
    /// <summary>
    /// used to send confirmationmail
    /// </summary>
    [Inject]
    public UserManager<ApplicationUser> UserManager { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; }

    [Parameter]
    public int TabIndex { get; set; }

    public string NewEmail { get; set; }

    public IdentityUser CurrentUser { get; set; }
    private bool wasDarkMode;
    private bool pinValidated = false;

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = await UserService.GetUserAsync(AuthenticationState);
        wasDarkMode = CurrentUser.IsDarkMode;
    }

    private async Task PromptForPin()
    {

        var dialog = await Dialog.ShowAsync<Pin_Dialog>("PIN", new DialogOptions { MaxWidth = MaxWidth.Small });
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is bool success && success)
        {
            pinValidated = true;
        }
    }

    private async Task Save()
    {
        try
        {
            await UserService.UpdateUser(CurrentUser);
            ToastService.Add("Opgeslagen", Severity.Success);
        }
        catch (Exception ex)
        {
            ToastService.Add(Loc["ErrorMessage"], Severity.Error);
            Debug.WriteLine(ex.Message);
        }
    }

    private async Task DarkModeChanged(bool? b = null)
    {
        try
        {
            CurrentUser.IsDarkMode = b.GetValueOrDefault();
            await UserService.UpdateUser(CurrentUser);

            //TODO: use an @key directive to trigger a reload to not lose state
            if (wasDarkMode != CurrentUser.IsDarkMode)
            {
                Nav.NavigateTo(Nav.Uri, true);
            }
        }
        catch (Exception ex)
        {
            ToastService.Add(Loc["ErrorMessage"], Severity.Error);
            Debug.WriteLine(ex.Message);
        }
    }

    private async Task ChangeMail()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(NewEmail) && CurrentUser.Email != NewEmail && CurrentUser.EmailConfirmed)
            {
                await UserService.SetEmail(CurrentUser, NewEmail);
            }
            ToastService.Add("Wachtwoord gewijzigd", Severity.Success);
        }
        catch (Exception ex)
        {
            ToastService.Add(Loc["ErrorMessage"], Severity.Error);
            Debug.WriteLine(ex.Message);
        }
    }

    private async Task SendConfirmationMail()
    {
        try
        {
            var code = await UserManager.GenerateEmailConfirmationTokenAsync(CurrentUser);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
            var link = $@"{Nav.BaseUri}Account/ConfirmEmail?userid={CurrentUser.Id}&code={code}";
            await Mailer.SendEmailConfirmationAsync(CurrentUser.Email, link);
        }
        catch (Exception ex)
        {
            ToastService.Add(Loc["ErrorMessage"], Severity.Error);
            Debug.WriteLine(ex.Message);
        }
    }
}
