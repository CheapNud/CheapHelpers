@page "/Account/ResetPassword"

@using CheapHelpers.Blazor.Services
@using CheapHelpers.Blazor.Shared
@using CheapHelpers.Services;
@using System.Text;
@using CheapHelpers.Services.Email
@using Microsoft.AspNetCore.WebUtilities;
@attribute [AllowAnonymous]

<MudForm @ref="form" Model="@model">
    <MudGrid Class="justify-center d-flex mt-6">
        <MudPaper Elevation=2 Class="pa-3" Style="max-width: 420px;">
            <MudGrid>
                <MudItem xxl="12" xl="12" md="12" xs="12">
                    <MudText Typo="Typo.h4">Reset password</MudText>
                </MudItem>
                <MudItem xxl="12" xl="12" md="12" xs="12">
                    <MudDivider />
                </MudItem>
                <MudItem xxl="12" xl="12" md="12" xs="12">
                    <MudText Typo="Typo.subtitle2">@Loc["PasswordRules"]</MudText>
                </MudItem>
                <MudItem xxl="12" xl="12" md="12" xs="12">
                    <MudTextField @bind-Value=model.Email Clearable=true Placeholder="example@domain.com" Label="Email" InputMode=InputMode.email InputType=InputType.Email Variant="Variant.Outlined" For="(() => model.Email)"></MudTextField>
                </MudItem>
                <MudItem xxl="12" xl="12" md="12" xs="12">
                    <PasswordTextField Label="New Password" @bind-Value="model.NewPassword" For="(() => model.NewPassword)" FullWidth=true></PasswordTextField>
                </MudItem>
                <MudItem xxl="12" xl="12" md="12" xs="12">
                    <PasswordTextField Label="Confirm Password" @bind-Value="model.ConfirmPassword" For="(() => model.ConfirmPassword)" FullWidth=true></PasswordTextField>
                </MudItem>
                <MudItem xxl="12" xl="12" md="12" xs="12">
                    <ProgressButton Variant="Variant.Filled" FullWidth=true Color=Color.Primary OnClick="ChangePassword" ButtonText="@Loc["Save"]" For="(() => model.ConfirmPassword)"></ProgressButton>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudGrid>
</MudForm>

@code {
    public bool AccountVerified { get; set; } = false;

    public class ResetPasswordViewModel
    {
        public string Email { get; set; }
        public string NewPassword { get; set; }
        public string ConfirmPassword { get; set; }
    }

    public ResetPasswordViewModel model = new();
    public MudForm form;

    [Parameter]
    [SupplyParameterFromQuery(Name = "userid")]
    public string UserId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "code")]
    public string Code { get; set; }

    [Inject] protected NavigationManager Nav { get; set; } = default!;
    [Inject] protected ISnackbar ToastService { get; set; } = default!;
    [Inject] protected IStringLocalizer Loc { get; set; } = default!;
    [Inject] protected IEmailService? Mailer { get; set; }
    [Inject] protected IAuthorizationService AuthorizationService { get; set; } = default!;
    [Inject] protected UserService UserService { get; set; } = default!;
    [Inject]
    public UserManager<IdentityUser> UserManager { get; set; }

    protected override async Task OnInitializedAsync()
    {

        if (string.IsNullOrWhiteSpace(Code) || string.IsNullOrWhiteSpace(UserId))
        {
            ToastService.Add("no codes", Severity.Error);
            return;
        }

        var user = await UserManager.FindByIdAsync(UserId);
        if (user == null)
        {
            return;
        }

        model.Email = user.UserName;

        AccountVerified = await UserManager.IsEmailConfirmedAsync(user);
        if (!AccountVerified)
        {
            var codeconfirm = await UserManager.GenerateEmailConfirmationTokenAsync(user);
            codeconfirm = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(codeconfirm));
            var link = $@"{Nav.BaseUri}Account/ConfirmEmail?userid={UserId}&code={codeconfirm}";
            await Mailer.SendEmailConfirmationAsync(user.Email, link);
            ToastService.Add("Bevestig uw account voordat u uw wachtwoord reset, er is een mail verzonden", Severity.Info);
            return;
        }
    }

    private async Task ChangePassword()
    {
        try
        {
            if (!model.NewPassword.Equals(model.ConfirmPassword))
            {
                ToastService.Add("Nieuw wachtwoord komt niet overeen met confirmatie");
                return;
            }

            var user = await UserManager.FindByIdAsync(UserId);
            if (user == null)
            {
                return;
            }

            var code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));

            var result = await UserManager.ResetPasswordAsync(user, code, model.NewPassword);
            if (result.Succeeded)
            {
                ToastService.Add(Loc["Saved"], Severity.Success);
                Nav.NavigateTo("/Account/Login");
            }
            else
            {
                ToastService.Add(Loc["ErrorMessage"], Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.Message);
            ToastService.Add(Loc["ErrorMessage"]);
        }
    }
}
