@page "/Account/SetPassword"
@using CheapHelpers.Blazor.Services
@using CheapHelpers.Blazor.Shared
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using System.Text
@attribute [Authorize]

<MudText Typo="Typo.h4">@Loc["SetPassword"]</MudText>
<MudText Typo="Typo.body1" Class="mb-4">@Loc["SetPasswordDescription"]</MudText>

<MudForm @ref="form" Model="@model" Validation="@(validator.ValidateValue)">
    <MudText Typo="Typo.subtitle2">@Loc["PasswordRules"]</MudText>
    <PasswordTextField Class="mt-3" Label="@Loc["NewPassword"]" @bind-Value=model.NewPassword For="(() => model.NewPassword)"></PasswordTextField>
    <PasswordTextField Class="mt-3" Label="@Loc["ConfirmPassword"]" @bind-Value=model.ConfirmPassword For="(() => model.ConfirmPassword)"></PasswordTextField>
</MudForm>

<MudButton Class="mt-3" Variant="Variant.Filled" Color="Color.Primary" OnClick="SetPasswordAsync" Disabled="isProcessing">
    @if (isProcessing)
    {
        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
        <MudText Class="ms-2">@Loc["Processing"]</MudText>
    }
    else
    {
        @Loc["SetPassword"]
    }
</MudButton>

@code {
    public class SetPasswordViewModel
    {
        public string NewPassword { get; set; } = string.Empty;
        public string ConfirmPassword { get; set; } = string.Empty;
    }

    [Inject] private UserManager<IdentityUser> UserManager { get; set; } = default!;
    [Inject] private ISnackbar ToastService { get; set; } = default!;
    [Inject] private IStringLocalizer Loc { get; set; } = default!;
    [Inject] private NavigationManager Nav { get; set; } = default!;

    [CascadingParameter] private Task<AuthenticationState> AuthenticationStateTask { get; set; } = default!;

    private SetPasswordViewModel model = new();
    private MudForm form = default!;
    private SetPasswordValidator validator = default!;
    private bool isProcessing = false;

    protected override async Task OnInitializedAsync()
    {
        var user = await GetCurrentUserAsync();
        if (user?.PasswordHash != null)
        {
            // User already has a password, redirect to change password
            Nav.NavigateTo("/Account");
            return;
        }
    }

    private async Task SetPasswordAsync()
    {
        try
        {
            await form.Validate();
            if (!form.IsValid) return;

            isProcessing = true;
            StateHasChanged();

            var user = await GetCurrentUserAsync();
            if (user == null)
            {
                ToastService.Add(Loc["UserNotFound"], Severity.Error);
                return;
            }

            var result = await UserManager.AddPasswordAsync(user, model.NewPassword);
            if (result.Succeeded)
            {
                ToastService.Add(Loc["PasswordSet"], Severity.Success);
                Nav.NavigateTo("/Account");
            }
            else
            {
                foreach (var error in result.Errors)
                {
                    ToastService.Add(error.Description, Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error setting password: {ex.Message}");
            ToastService.Add(Loc["ErrorMessage"], Severity.Error);
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task<IdentityUser?> GetCurrentUserAsync()
    {
        var authState = await AuthenticationStateTask;
        return await UserManager.GetUserAsync(authState.User);
    }
}