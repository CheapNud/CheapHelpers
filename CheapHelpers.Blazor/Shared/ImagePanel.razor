@using System.IO
@using Azure.AI.Vision.ImageAnalysis
@using CheapHelpers.EF
@using CheapHelpers.Extensions
@using CheapHelpers.Models.Entities
@using CheapHelpers.Services.Storage
@using CheapHelpers.Services.Storage.Configuration
@using Microsoft.Extensions.Hosting
@using Microsoft.AspNetCore.Components.Web
@using System.Net.Http.Headers
@using System.Text
@using System.Web

@if (Files != null)
{
    <MudGrid Class="@Class" Justify="Justify.FlexStart">
        @foreach (var image in Files)
        {
            <MudItem>
                <MudPaper Style="overflow-wrap:anywhere;" Class="pa-4" Elevation="2">
                    <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center">
                        <MudText Align="Align.Center" Typo="Typo.body1">@(UseShortNames ? image.FileName.ToShortString() : image.FileName)</MudText>
                        <ImageComponent Height="ImageHeight" BlobContainer="BlobContainer" Image="image"></ImageComponent>
                    </MudStack>
                    @if (CanDelete || CanEdit)
                    {
                        <MudGrid Class="px-3 mt-2">
                            @if (CanEdit)
                            {
                                <MudItem xs="4">
                                    <MudTooltip Text="@Loc["DisplayIndex"]">
                                        <MudNumericField T="int" Step="1" FullWidth="true" Variant="Variant.Outlined" ValueChanged="@(x => OnDisplayIndexChanged(image, x))" Value=@image.DisplayIndex Label="@Loc["DisplayIndex"]" />
                                    </MudTooltip>
                                </MudItem>
                                <MudItem>
                                    <MudTooltip Text="@Loc["Visible"]">
                                        <MudCheckBox Class="mt-2" T="bool" ValueChanged="@(x => OnVisibleChanged(image, x))" Value=@image.Visible Label="@Loc["Visible"]" />
                                    </MudTooltip>
                                </MudItem>
                            }
                            @if (CanDelete)
                            {
                                <MudItem>
                                    <MudTooltip Text="@Loc["Delete"]">
                                        <MudIconButton Class="mt-3" OnClick="() => 
DeleteImage(image)" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Variant="Variant.Filled" aria-label="delete"></MudIconButton>
                                    </MudTooltip>
                                </MudItem>
                            }
                        </MudGrid>
                    }
                </MudPaper>
            </MudItem>
        }
    </MudGrid>
}


@code {

    [Inject]
    public ISnackbar ToastService { get; set; }


    [Inject]
    protected IStringLocalizer Loc { get; set; } = default!;

    //TODO: Convert to filepanel and use to display all uploads
    [EditorRequired]
    [Parameter]
    public List<FileAttachment> Files { get; set; }

    [Parameter]
    public bool CanDelete { get; set; } = true;

    [Parameter]
    public bool CanEdit { get; set; } = false;

    [EditorRequired]
    [Parameter]
    public BlobContainers BlobContainer { get; set; }

    [Parameter]
    public string Class { get; set; }

    /// <summary>
    /// Deletes the image from the blobcontainer, database calls you need to handle on your own
    /// </summary>
    [Parameter]
    public EventCallback<FileAttachment> OnDelete { get; set; }

    [Parameter]
    public int ImageHeight { get; set; } = 200;

    [Parameter]
    public bool UseShortNames { get; set; } = false;

    [Inject]
    private BlobService BlobService { get; set; }

    [Inject]
    private IDialogService Dialog { get; set; }

    [Inject]
    private IDbContextFactory<CheapHelpers.EF.CheapContext<CheapUser>> Factory { get; set; }
    // [Inject]
    // private VisionServiceOptions VisionServiceOptions { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // AnalyzeImage();
    }

    private async Task OnVisibleChanged(FileAttachment f, bool visible)
    {
        try
        {
            f.Visible = visible;
            using (var context = Factory.CreateDbContext())
            {
                await context.FileAttachments.Where(x => x.Id == f.Id).ExecuteUpdateAsync(x => x.SetProperty(y => y.Visible, visible));
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.Message);
            ToastService.Add(Loc["Error"], Severity.Error);
        }
    }

    private async Task OnDisplayIndexChanged(FileAttachment f, int displayindex)
    {
        try
        {
            f.DisplayIndex = displayindex;
            using (var context = Factory.CreateDbContext())
            {
                await context.FileAttachments.Where(x => x.Id == f.Id).ExecuteUpdateAsync(x => x.SetProperty(y => y.DisplayIndex, displayindex));
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.Message);
            ToastService.Add(Loc["Error"], Severity.Error);
        }
    }

    private async Task DeleteImage(FileAttachment file)
    {
        if (file is null)
        {
            throw new ArgumentNullException(nameof(file));
        }

        try
        {
            bool? result = await Dialog.ShowMessageBox("Bevestiging", (MarkupString)$"Bent u zeker dat u deze afbeelding wilt verwijderen?", yesText: "Verwijderen", noText: "Annuleren");

            if (!result.Value)
            {
                return;
            }

            Files.Remove(file);

            //await Delete, you need to make your own database calls for now, temp blobcontainer does not exist in database;
            await OnDelete.InvokeAsync(file);

            //delete from azure
            await BlobService.DeleteFileAsync(file.FileName, BlobContainer);
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.Message);
            ToastService.Add("Er ging iets mis bij het verwijderen", Severity.Error);
        }
    }

    static async void GetThumbnail(Uri publicuri)
    {
        var client = new HttpClient();
        var queryString = HttpUtility.ParseQueryString(string.Empty);

        // Request headers
        client.DefaultRequestHeaders.Add("Ocp-Apim-Subscription-Key", "{subscription key}");

        // Request parameters
        queryString["width"] = "{800}";
        queryString["height"] = "{600}";
        queryString["smartCropping"] = "true";
        queryString["model-version"] = "latest";
        var uri = "https://xxxvision.cognitiveservices.azure.com/vision/v3.2/generateThumbnail?" + queryString;

        HttpResponseMessage response;

        // Request body
        byte[] byteData = Encoding.UTF8.GetBytes("{body}");

        using (var content = new ByteArrayContent(byteData))
        {
            content.Headers.ContentType = new MediaTypeHeaderValue(MimeMapping.KnownMimeTypes.Json);
            response = await client.PostAsync(uri, content);
        }
    }

    // private void AnalyzeImage()
    // {
    //     //exmaple on how to use AI for image analyses
    //     using var imageSource = VisionSource.FromUrl(new Uri("https://learn.microsoft.com/azure/ai-services/computer-vision/media/quickstarts/presentation.png"));

    //     var analysisOptions = new ImageAnalysisOptions()
    //         {
    //             Features = ImageAnalysisFeature.Caption | ImageAnalysisFeature.Text,
    //             Language = "en",
    //             GenderNeutralCaption = false //<== WTF, is this reality or a dream?
    //         };

    //     using var analyzer = new ImageAnalyzer(VisionServiceOptions, imageSource, analysisOptions);

    //     var result = analyzer.Analyze();

    //     if (result.Reason == ImageAnalysisResultReason.Analyzed)
    //     {
    //         if (result.Caption != null)
    //         {
    //             Debug.WriteLine(" Caption:");
    //             Debug.WriteLine($"   \"{result.Caption.Content}\", Confidence {result.Caption.Confidence:0.0000}");
    //         }

    //         if (result.Text != null)
    //         {
    //             Debug.WriteLine($" Text:");
    //             foreach (var line in result.Text.Lines)
    //             {
    //                 string pointsToString = "{" + string.Join(',', line.BoundingPolygon.Select(pointsToString => pointsToString.ToString())) + "}";
    //                 Debug.WriteLine($"   Line: '{line.Content}', Bounding polygon {pointsToString}");

    //                 foreach (var word in line.Words)
    //                 {
    //                     pointsToString = "{" + string.Join(',', word.BoundingPolygon.Select(pointsToString => pointsToString.ToString())) + "}";
    //                     Debug.WriteLine($"     Word: '{word.Content}', Bounding polygon {pointsToString}, Confidence {word.Confidence:0.0000}");
    //                 }
    //             }
    //         }
    //     }
    //     else
    //     {
    //         var errorDetails = ImageAnalysisErrorDetails.FromResult(result);
    //         Debug.WriteLine(" Analysis failed.");
    //         Debug.WriteLine($"   Error reason : {errorDetails.Reason}");
    //         Debug.WriteLine($"   Error code : {errorDetails.ErrorCode}");
    //         Debug.WriteLine($"   Error message: {errorDetails.Message}");
    //     }
    // }

}
