@using CheapHelpers.Blazor.Data
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@inherits LayoutComponentBase
@implements IDisposable

<MudThemeProvider IsDarkMode="darkMode" />
<MudPopoverProvider />
<MudDialogProvider Position="DialogPosition.Center" FullWidth="true"
                   CloseButton="true"
                   NoHeader="false" />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1" Fixed="true" Dense="false" Color=@(darkMode ? Color.Dark : Color.Primary)>
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
        <MudSpacer />
        <LoginDisplay />
    </MudAppBar>
    <MudDrawer @bind-Open="@open" Elevation="1">
        <MudDrawerHeader Dense="true">
            <MudText Typo="Typo.h6">CheapTitle</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer Class="my-3" Fixed=false MaxWidth="MaxWidth.ExtraExtraLarge">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    bool open = true;
    bool darkMode = false;

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    [Inject]
    private SignInManager<IdentityUser> SignInManager { get; set; }

    [Inject]
    private UserManager<IdentityUser> UserManager { get; set; }

    [Inject]
    private UserService UserService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (await UserService.IsAuthenticated(AuthenticationStateTask))
        {
            var user = await UserService.GetUserAsync(AuthenticationStateTask);
            darkMode = user.IsDarkMode;
        }
    }

    private void ToggleDrawer()
    {
        open = !open;
    }

    //use task
    public void Dispose()
    {
        //var auth = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        //Debug.WriteLine(ConnectedUserList.GetCurrentUser(auth.User).Email);
        //ConnectedUserList.LogOut(auth.User);
    }
}