@* 


//TODO: make this a generic search dialog for any entity, maybe with a generic search function passed in as a parameter


<MudDialog>
    <DialogContent>
        <MudGrid Justify="Justify.Center">
            <MudItem xs="12">
                <MudAutocomplete FullWidth=true @ref=autoorder Variant="Variant.Outlined" T="Order" Label="@Loc["OrderNumber"]" SearchFunc="@SearchOrder" @bind-Value=SelectedOrder
                ToStringFunc="@(e => e == null ? "" : $"{e.OrderNumber}")" Clearable=true Class="mt-3" DebounceInterval="300" ShowProgressIndicator=true />
            </MudItem>
            <MudItem xs="12">
                <MudAutocomplete FullWidth=true @ref=autostockorder Variant="Variant.Outlined" T="StockOrder" Label="StockNumber" SearchFunc="@SearchStockOrder" @bind-Value=SelectedStockOrder
                ToStringFunc="@(e => e == null ? "" : $"{e.StockNumber}")" Clearable=true Class="mt-3" DebounceInterval="300" ShowProgressIndicator=true />
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton Variant=Variant.Filled Color=Color.Info OnClick="Cancel">@Loc["Cancel"]</MudButton>
        <MudButton Variant=Variant.Filled Color="Color.Primary" OnClick="GoToOrder">@Loc["Ok"]</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private MudAutocomplete<Order> autoorder;
    private MudAutocomplete<StockOrder> autostockorder;
    
    [Inject]
    public OrderRepo OrderService { get; set; }

    [Parameter]
    public int? CustomerId { get; set; }

    public Order SelectedOrder { get; set; }

    public StockOrder SelectedStockOrder { get; set; }

    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    private async Task<IEnumerable<Order>> SearchOrder(string searchText, CancellationToken token = default)
    {
        try
        {
            using (var context = Factory.CreateDbContext())
            {
                var query = context.Orders.AsNoTracking();

                if (CustomerId != null)
                {
                    query = query.Where(x => x.Customer.Id == CustomerId);
                }

                if (!string.IsNullOrWhiteSpace(searchText))
                {
                    query = query.Where(x => x.OrderNumber != null && x.OrderNumber.Contains(searchText));
                }

                if (autoorder.MaxItems.HasValue)
                {
                    query = query.Take(autoorder.MaxItems.Value);
                }

                var result = await query.OrderBy(x => x.OrderNumber).Select(x => new Order { Id = x.Id, OrderNumber = x.OrderNumber }).ToListAsync(token);
                return result;
            }
        }
        catch (TaskCanceledException tc)
        {
            Debug.WriteLine(tc.Message);
            return new List<Order>();
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.Message);
            throw;
        }
    }

    private void GoToOrder()
    {
        if (SelectedOrder != null)
        {
                    MudDialog.Close(DialogResult.Ok(SelectedOrder.Id));
            return;
        }

                if (SelectedStockOrder != null)
        {
                    MudDialog.Close(DialogResult.Ok(SelectedStockOrder.OrderId));
            return;
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task<IEnumerable<StockOrder>> SearchStockOrder(string searchText, CancellationToken token = default)
    {
        try
        {
            using (var context = Factory.CreateDbContext())
            {
                var query = context.StockOrders.Where(x => x.StockNumber != null).AsNoTracking();

                if (!string.IsNullOrWhiteSpace(searchText))
                {
                    query = query.Where(x => x.StockNumber.Contains(searchText));
                }

                if (autostockorder.MaxItems.HasValue)
                {
                    query = query.Take(autostockorder.MaxItems.Value);
                }

                var result = await query.OrderBy(x => x.StockNumber).Select(x => new StockOrder { Id = x.Id, StockNumber = x.StockNumber, OrderId = x.OrderId }).ToListAsync(token);
                return result;
            }
        }
        catch (TaskCanceledException tc)
        {
            Debug.WriteLine(tc.Message);
            return new List<StockOrder>();
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.Message);
            throw;
        }
    }
}
 *@