@* 
<MudGrid>
    <MudItem xs="12" md="2">
        <MudPaper Class="pa-3 border-dashed border-2 mud-border-primary" Elevation="1">
            <MudText Typo="Typo.h6">Prijsgroep</MudText>
            @if (PriceGroups != null)
            {
                <MudChipSet Style="height:500px;overflow-y:scroll;" Color="Color.Info" Class="pa-5 mt-1" T="PriceGroup" Ripple Size="Size.Large" SelectedColor=Color.Success SelectedValueChanged="PriceGroupChanged" SelectedValue="SelectedPriceGroup" CheckMark SelectionMode=SelectionMode.SingleSelection>
                    @foreach (var p in PriceGroups)
                    {
                        <MudChip Style="width:100%;" Text="@p.Code" Value="@p">@p.Code</MudChip>
                    }
                </MudChipSet>
            }
            else
            {
                <MudProgressCircular Size="Size.Small" Indeterminate />
            }
        </MudPaper>
    </MudItem>
    <MudItem xs="12" md="9">
        <MudPaper Class="pa-3" Elevation="0">
            <MudText Typo="Typo.h6">Stof</MudText>
            @if (SelectedPriceGroup == null)
            {
                <MudText Typo="Typo.h5" Class="mt-3" Align="Align.Center">Kies een Prijsgroep!</MudText>
            }
            else
            {
                @if (FabricColors != null)
                {
                    <MudChipSet T="FabricColor" Ripple Size="Size.Large" Variant="Variant.Filled" Color="Color.Primary" SelectedColor=Color.Success SelectedValueChanged="ValueChanged" SelectedValue="Value" CheckMark SelectionMode=SelectionMode.SingleSelection>
                        @foreach (var key in FabricColors)
                        {
                            <MudPaper Class="mt-3 pa-3">
                                <MudText Typo="Typo.h6">@key.Key</MudText>
                                @foreach (var item in key.Select(y => y))
                                {
                                    <MudChip Text="@item.Code" Value="@item">
                                        <AvatarContent>
                                            <MudAvatar>
                                                <ImageComponent BlobContainer="BlobContainers.FabricColorContainer" Image="@(item.FabricColorFileAttachment as FileAttachment)"></ImageComponent>
                                            </MudAvatar>
                                        </AvatarContent>
                                    </MudChip>
                                }
                            </MudPaper>
                        }
                    </MudChipSet>
                }
                else
                {
                    <MudProgressLinear Color="Color.Primary" Rounded Size="Size.Large" Striped Min="0" Indeterminate></MudProgressLinear>
                }
            }
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    public PriceGroup SelectedPriceGroup { get; set; }
    private List<PriceGroup> PriceGroups { get; set; }

    [Parameter]
    public FabricColor Value { get; set; }

    [Parameter]
    public EventCallback<FabricColor> ValueChanged { get; set; }

    private List<IGrouping<string, FabricColor>> FabricColors { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using (var context = Factory.CreateDbContext())
        {
            PriceGroups = await context.PriceGroups.AsNoTracking()
            .Where(x => (x.Code.StartsWith("st") || x.Code.StartsWith("w")) && x.FabricGroups.Where(y => y.FabricColors.Where(z => z.GlobalTradeItemState.Code == "ik").Any()).Any())
            .OrderBy(x => x.Code)
            .ToListAsync();
        }
    }

    private async Task PriceGroupChanged(PriceGroup p)
    {
        SelectedPriceGroup = p;
        await LoadFabricColors();
    }

    private async Task LoadFabricColors()
    {
        try
        {
            using var context = Factory.CreateDbContext();
            FabricColors = await context.FabricColors.AsNoTracking().Include(x => x.FabricColorFileAttachment).Where(x => x.FabricGroup.PriceGroupId == SelectedPriceGroup.Id && x.GlobalTradeItemState.Code == "ik").OrderBy(x => x.Code).ThenBy(x => x.DisplayIndex).GroupBy(x => x.FabricGroup.Code).ToListAsync();
        }
        catch (Exception ex)
        {


        }
    }
}
 *@