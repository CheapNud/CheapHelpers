@using System.Linq.Expressions;

<MudTextField @attributes="@CapturedAttributes" For="@For" Class="@Class" T="string" Value=Value ValueChanged="OnValueChanged" FullWidth=FullWidth
              Clearable=true Placeholder="@Loc["PasswordExample"]" Label="@Label" InputType="@PasswordInput" Variant="Variant.Outlined"
              Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ShowPassword" AdornmentAriaLabel="Show Password">
</MudTextField>

@code {
    [Parameter]
    public string Value { get; set; }

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    [Parameter]
    public string Class { get; set; }

    [Parameter]
    public bool FullWidth { get; set; } = false;

    [Parameter]
    public Expression<Func<string>> For { get; set; }

    [Parameter]
    public string Label { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> CapturedAttributes { get; set; }

    [Inject] protected IStringLocalizer Loc { get; set; } = default!;

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    protected override void OnInitialized()
    {
        Label = Label ?? Loc["Password"];
    }

    private void ShowPassword()
    {
        if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private async Task OnValueChanged(string p)
    {
        Value = p;
        await ValueChanged.InvokeAsync(Value);
    }
}
