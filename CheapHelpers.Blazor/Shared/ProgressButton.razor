<MudButton @attributes="@CapturedAttributes"
           HtmlTag="@HtmlTag"
           Class="@Class"
           Variant="@Variant"
           Color="@Color"
           OnClick="Clicked"
           StartIcon="@StartIcon"
           Size="@Size"
           FullWidth=@FullWidth
           Disabled=@(Disabled ? Disabled : processing)
           Ripple=@(!processing)
           for="@For">
    @if (processing)
    {
        if (Disabled)
        {
            @ButtonText
        }
        else
        {
            <MudProgressCircular Class="ms-n1" Size="MudBlazor.Size.Small" Indeterminate="true" />
            <MudText Class="ms-2">@Loc["Processing"]</MudText>
        }
    }
    else
    {
        @ButtonText
    }
</MudButton>

@code {
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> CapturedAttributes { get; set; }

    [Parameter]
    public string Class { get; set; }

    [Parameter]
    public bool Disabled { get; set; } = false;

    [Parameter]
    public string ButtonText { get; set; }

    [Parameter]
    public string HtmlTag { get; set; }

    [Parameter]
    public string For { get; set; }

    [Parameter]
    public bool FullWidth { get; set; } = false;

    [Parameter]
    public string StartIcon { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback<MouseEventArgs> OnClick { get; set; }

    [Parameter]
    public MudBlazor.Color Color { get; set; } = Color.Primary;

    [Parameter]
    public MudBlazor.Variant Variant { get; set; } = Variant.Filled;

    [Parameter]
    public MudBlazor.Size Size { get; set; } = Size.Medium;

    private bool processing = false;



    private async Task Clicked(MouseEventArgs args)
    {
        processing = true;
        await OnClick.InvokeAsync(args);
        processing = false;
    }
}
